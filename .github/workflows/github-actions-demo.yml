name: GitHub Actions Demo
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release version'
        required: true
      token:
        description: 'Deploy token'
        required: true

jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "üîé Branch ${{ github.ref }} repository ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: ls -l ${{ github.workspace }}
#           ls -l ~/Downloads
#       - run: echo "üçè This job's status is ${{ job.status }}."

  check:
    outputs:
      result: ${{ steps.early.result }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Early exit
        id: early
        run: |
          ls -l ${{ github.workspace }}
          git checkout branch1
          action_hash=$(git rev-parse --short "$GITHUB_SHA")
          action_branch=${GITHUB_REF#refs/heads/}
          git_hash=$(git rev-parse --short HEAD)
          git_branch=$(git rev-parse --abbrev-ref HEAD)
          echo "üîé Action: $action_branch $action_hash Current: $git_branch $git_hash"
          if [[ git_branch = 'branch1' ]]
          then
            echo "::set-output name=result::success"
          else
            echo "::set-output name=result::fail"
          fi
        
  print-inputs:
    needs: check
    if: needs.check.outputs.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Print the release version
        run: echo "üîé Input release ${{ github.event.inputs.release }}"

      - name: Print the release version
        run: |
          ls -l ${{ github.workspace }}
          ls -l .
          cd repowf
          ls -l .
          git status

#       - name: Download azcopy
#         run: |
#           mkdir scripts && cd ./scripts
#           AZCOPY_STATIC_URL="https://azcopyvnext.azureedge.net/release20210616/azcopy_linux_amd64_10.11.0.tar.gz"
#           wget -O azcopy_v10.tar.gz $AZCOPY_STATIC_URL && tar -xf azcopy_v10.tar.gz --strip-components=1

#       - name: Sync files
#         working-directory: ./3004005
#         run: |
#           for d in */ ; do
#               echo "Releasing: $d"
#               ../scripts/azcopy sync "$d" "https://manufacturingdata.blob.core.windows.net/data/PP/BodyAssyTest/0000000000000/$d?${{ github.event.inputs.token }}" --put-md5 --exclude-pattern=".DS_Store" --delete-destination="true"
#           done

